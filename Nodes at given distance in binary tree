/* A binary Tree node
struct Node
{
    int data;
    struct Node *left, *right;
};
*/

class Solution {
private:
    map<Node*, Node*> parent;

    // Function to set the parent of each node in the tree
    void setParent(Node* root) {
        parent[root] = NULL;
        queue<Node*> q;
        q.push(root);
        while (!q.empty()) {
            int n = q.size();
            while (n--) {
                Node* temp = q.front();
                q.pop();
                if (temp->left) {
                    parent[temp->left] = temp;
                    q.push(temp->left);
                }
                if (temp->right) {
                    parent[temp->right] = temp;
                    q.push(temp->right);
                }
            }
        }
    }

    // Function to find the target node with a given value
    Node* getTargetNode(Node* root, int targetValue) {
        if (!root) return NULL;
        if (root->data == targetValue) return root;
        Node* left = getTargetNode(root->left, targetValue);
        if (left) return left;
        return getTargetNode(root->right, targetValue);
    }

    // Function to perform BFS and return a list of values at K distance
    vector<int> bfs(Node* target, int k) {
        vector<int> ans;
        queue<Node*> q;
        map<Node*, bool> traverse;

        q.push(target);
        traverse[target] = true;

        while (!q.empty() && k >= 0) {
            int n = q.size();
            while (n--) {
                Node* temp = q.front();
                q.pop();
                if (k == 0) ans.push_back(temp->data);

                if (temp->left && !traverse[temp->left]) {
                    traverse[temp->left] = true;
                    q.push(temp->left);
                }
                if (temp->right && !traverse[temp->right]) {
                    traverse[temp->right] = true;
                    q.push(temp->right);
                }
                if (parent[temp] && !traverse[parent[temp]]) {
                    traverse[parent[temp]] = true;
                    q.push(parent[temp]);
                }
            }
            k--;
        }

        sort(ans.begin(), ans.end());
        return ans;
    }

public:
    vector<int> KDistanceNodes(Node* root, int target, int k) {
        setParent(root);
        Node* targetNode = getTargetNode(root, target);
        if (!targetNode) return {}; // Target not found
        return bfs(targetNode, k);
    }
};
